{
  
    
        "post0": {
            "title": "US COVID-19 Testing",
            "content": "from io import StringIO import pandas as pd import requests import altair as alt . # us_daily = pd.read_csv(&#39;https://covidtracking.com/api/us/daily.csv&#39;) # doesn&#39;t work sep=&quot;;&quot;) . headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&#39;} us_daily_url=&quot;https://covidtracking.com/api/us/daily.csv&quot; s=requests.get(us_daily_url, headers= headers).text . # s . &#39;date,states,positive,negative,posNeg,pending,death,total n20200304,14,118,748,866,103,,969 n20200305,24,176,953,1129,197,,1326 n20200306,36,223,1571,1794,458,,2252 n20200307,51,341,1809,2150,602,,2752 n20200308,51,417,2335,2752,347,,3099 n20200309,51,584,3367,3951,313,,4264 n20200310,51,778,3807,4585,469,,5054 n20200311,51,1053,5978,7031,563,27,7617 n20200312,51,1315,7949,9264,673,36,9966 n20200313,51,1922,13613,15535,1130,39,16665 n20200314,51,2450,17102,19552,1236,49,20789 n20200315,51,3173,22548,25721,2242,60,27963 n20200316,56,4019,36104,40123,1691,71,41714 n20200317,56,5723,47604,53327,1687,90,54957 n20200318,56,7731,66225,73956,2538,112,76495 n20200319,56,11723,89119,100842,3025,160,103867&#39; . us_daily=pd.read_csv(StringIO(s)) . us_daily . date states positive negative posNeg pending death total . 0 20200304 | 14 | 118 | 748 | 866 | 103 | NaN | 969 | . 1 20200305 | 24 | 176 | 953 | 1129 | 197 | NaN | 1326 | . 2 20200306 | 36 | 223 | 1571 | 1794 | 458 | NaN | 2252 | . 3 20200307 | 51 | 341 | 1809 | 2150 | 602 | NaN | 2752 | . 4 20200308 | 51 | 417 | 2335 | 2752 | 347 | NaN | 3099 | . 5 20200309 | 51 | 584 | 3367 | 3951 | 313 | NaN | 4264 | . 6 20200310 | 51 | 778 | 3807 | 4585 | 469 | NaN | 5054 | . 7 20200311 | 51 | 1053 | 5978 | 7031 | 563 | 27.0 | 7617 | . 8 20200312 | 51 | 1315 | 7949 | 9264 | 673 | 36.0 | 9966 | . 9 20200313 | 51 | 1922 | 13613 | 15535 | 1130 | 39.0 | 16665 | . 10 20200314 | 51 | 2450 | 17102 | 19552 | 1236 | 49.0 | 20789 | . 11 20200315 | 51 | 3173 | 22548 | 25721 | 2242 | 60.0 | 27963 | . 12 20200316 | 56 | 4019 | 36104 | 40123 | 1691 | 71.0 | 41714 | . 13 20200317 | 56 | 5723 | 47604 | 53327 | 1687 | 90.0 | 54957 | . 14 20200318 | 56 | 7731 | 66225 | 73956 | 2538 | 112.0 | 76495 | . 15 20200319 | 56 | 11723 | 89119 | 100842 | 3025 | 160.0 | 103867 | . us_daily[&#39;tests_done_daily&#39;] = us_daily[&#39;total&#39;] - us_daily[&#39;total&#39;].shift(1) us_daily[&#39;positive_daily&#39;] = us_daily[&#39;positive&#39;] - us_daily[&#39;positive&#39;].shift(1) us_daily[&#39;positive_rate_daily&#39;] = us_daily[&#39;positive_daily&#39;] / us_daily[&#39;tests_done_daily&#39;] . us_daily[&#39;date&#39;] = pd.to_datetime(us_daily[&#39;date&#39;], format=&#39;%Y%m%d&#39;) . # from vega_datasets import data # source = data.stocks() # source . symbol date price . 0 MSFT | 2000-01-01 | 39.81 | . 1 MSFT | 2000-02-01 | 36.35 | . 2 MSFT | 2000-03-01 | 43.22 | . 3 MSFT | 2000-04-01 | 28.37 | . 4 MSFT | 2000-05-01 | 25.45 | . ... ... | ... | ... | . 555 AAPL | 2009-11-01 | 199.91 | . 556 AAPL | 2009-12-01 | 210.73 | . 557 AAPL | 2010-01-01 | 192.06 | . 558 AAPL | 2010-02-01 | 204.62 | . 559 AAPL | 2010-03-01 | 223.02 | . 560 rows × 3 columns . Total tests done positive rate (at a daily level) . base = alt.Chart(us_daily).encode(x=&#39;date:O&#39;) bar = base.mark_bar().encode(y=&#39;tests_done_daily:Q&#39;) line = base.mark_line(color=&#39;red&#39;).encode( y=&#39;positive_rate_daily:Q&#39; ) (bar + line).properties(width=600).resolve_scale(y=&#39;independent&#39;) .",
            "url": "https://lawwu.github.io/data-science-musings/jupyter/2020/02/20/us_covid19_testing.html",
            "relUrl": "/jupyter/2020/02/20/us_covid19_testing.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lawwu.github.io/data-science-musings/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lawwu.github.io/data-science-musings/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lawwu.github.io/data-science-musings/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}